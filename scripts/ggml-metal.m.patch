--- ggml-metal.m.orig	2024-01-19 10:55:39
+++ ggml-metal.m	2024-01-19 10:58:09
@@ -254,7 +254,7 @@
     WSP_GGML_METAL_LOG_INFO("%s: picking default device: %s\n", __func__, [s UTF8String]);

     // Configure context
-    struct wsp_ggml_metal_context * ctx = malloc(sizeof(struct wsp_ggml_metal_context));
+    struct wsp_ggml_metal_context * ctx = calloc(1, sizeof(struct wsp_ggml_metal_context));
     ctx->device = device;
     ctx->n_cb   = MIN(n_cb, WSP_GGML_METAL_MAX_BUFFERS);
     ctx->queue  = [ctx->device newCommandQueue];
@@ -288,7 +288,7 @@
             if (ggmlMetalPathResources) {
                 sourcePath = [ggmlMetalPathResources stringByAppendingPathComponent:@"ggml-metal.metal"];
             } else {
-                sourcePath = [bundle pathForResource:@"ggml-metal" ofType:@"metal"];
+                sourcePath = [bundle pathForResource:@"ggml-metal-whisper" ofType:@"metal"];
             }
             if (sourcePath == nil) {
                 WSP_GGML_METAL_LOG_WARN("%s: error: could not use bundle path to find ggml-metal.metal, falling back to trying cwd\n", __func__);
@@ -530,27 +530,7 @@

 static void wsp_ggml_metal_free(struct wsp_ggml_metal_context * ctx) {
     WSP_GGML_METAL_LOG_INFO("%s: deallocating\n", __func__);
-
-    for (int i = 0; i < ctx->n_buffers; ++i) {
-        [ctx->buffers[i].metal release];
-    }
-
-    for (int i = 0; i < WSP_GGML_METAL_MAX_KERNELS; ++i) {
-        if (ctx->kernels[i].pipeline) {
-            [ctx->kernels[i].pipeline release];
-        }
-
-        if (ctx->kernels[i].function) {
-            [ctx->kernels[i].function release];
-        }
-    }

-    [ctx->library release];
-    [ctx->queue release];
-    [ctx->device release];
-
-    dispatch_release(ctx->d_queue);
-
     free(ctx);
 }

@@ -2278,7 +2258,6 @@
     g_backend_device_ref_count--;

     if (g_backend_device_ref_count == 0) {
-        [g_backend_device release];
         g_backend_device = nil;
     }
 }
@@ -2292,9 +2271,6 @@
 WSP_GGML_CALL static void wsp_ggml_backend_metal_buffer_free_buffer(wsp_ggml_backend_buffer_t buffer) {
     struct wsp_ggml_backend_metal_buffer_context * ctx = (struct wsp_ggml_backend_metal_buffer_context *)buffer->context;

-    for (int i = 0; i < ctx->n_buffers; i++) {
-        [ctx->buffers[i].metal release];
-    }
     wsp_ggml_backend_metal_free_device();

     if (ctx->owned) {
